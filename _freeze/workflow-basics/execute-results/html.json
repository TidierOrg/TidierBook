{
  "hash": "e9d79e80aa100b7b6589ecada654e57d",
  "result": {
    "markdown": "---\ntitle: \"Workflow: Basics\"\n---\n\n## Coding basics\n\nYou can use Julia to do basic math calculations:\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n1 / 200 * 30\n(59 + 73 + 2) / 3\nsin(pi / 2)\n```\n:::\n\n\nYou can create new objects with the assignment operator `=`:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nx = 3 * 4\n```\n:::\n\n\nNote that the value of `x` is not printed, itâ€™s just stored. If you want to view the value, type `x` in the Julia REPL.\n\nCombine multiple values into a vector with square brackets:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nprimes = [2, 3, 5, 7, 11]\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n5-element Vector{Int64}:\n  2\n  3\n  5\n  7\n 11\n```\n:::\n:::\n\n\nApply basic arithmetics on each elemt of the vector:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nprimes * 2\nprimes .+1\n```\n:::\n\n\n## Comments\n\nComments are statements in a code that are ignored by the compiler at the time of execution, but their purpose is to be read by other humans. Comments provide an explanation for the steps that are used in the code. During coding, proper use of comments makes maintenance easier and finding bugs easily. \n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\n# Create a vector of primes\nprimes = [2, 3, 5, 7, 11]\n\n# Multiply primes by 2\nprimes * 2\n```\n:::\n\n\n## What is in a name?\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nobject_name = primes\nthis_is_a_really_long_name = 2.5\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n2.5\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\njulia_rocks = 2^3\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n8\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\njulia_rocks\n#> ERROR: UndefVarError: `julia_rock` not defined\n```\n:::\n\n\n## Calling functions\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nadd_x_and_y(x, y) = x + y\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nadd_x_and_y (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nadd_x_and_y(3, 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n7\n```\n:::\n:::\n\n\n",
    "supporting": [
      "workflow-basics_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}