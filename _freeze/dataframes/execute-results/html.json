{
  "hash": "717e10fdea392f46d32ecf5e68b28431",
  "result": {
    "engine": "jupyter",
    "markdown": "---\njupyter: julia-1.11\n# engine: julia\n---\n\n# Part 2: Dataframes\n\nA `dataframe` is a table (or a matrix) with some special details that make it suited for data analysis.\n\nWhen a dataframe is `tidy`, each row is an observation and each column is a variable. See [@Wickham2023, chapter 5] for a detailed discussion on tidy data and its advantages.\n\n![A tidy dataset. Figure from [@Wickham2023].](https://r4ds.hadley.nz/images/tidy-1.png)\n\n::: {#def-dataframe}\nA dataframe `df` is an array of vectors, all with the same length.\n\nA column of `df` is just one if its vectors.\n\nThe `i-th` row of `df` is the vector formed by the `i-th` coordinate of each of its columns.\n:::\n\nWe will use the classic iris dataset as a toy example for the remaining of the chapter.\n\n::: {#8b7fe6f1 .cell execution_count=2}\n``` {.julia .cell-code}\nusing DataFrames, RDatasets\nusing Tidier, Chain\nimport DataFramesMeta as DFM\n\npenguins = dataset(\"datasets\", \"iris\")\n```\n:::\n\n\n## Libraries\n\n### Dataframes\n\n`Dataframes.jl` is the main package for dealing with dataframes in Julia. You can use it directly to manipulate tables, but we also have 2 alternatives: `DataFramesMeta` and `TidierData`. \n\n### DataFramesMeta\n\nDataFramesMeta is a collection of macros based on DataFrames. It provides many syntatic helpers to slice rows, create columns and summarise data.\n\n### TidierData\n\nTidier is inspired by the `tidyverse` ecosystem in R. TidierData use macros to rewrite your code into DataFrames.jl code. Because of this \"tidy\" heritance, we will often talk about the R packages that inspired the Julia ones (like `dplyr`, `tidyr` and many others).\n\nIn this book, whenever possible, we will show the different approaches in a tabset so you can compare them, giving more emphasis on Tidier.\n\n## Operations\n\nLet's start with some unary operations, ie. operations that take only one dataframe as input and return one dataframe as output.^[Join operations will be dealt later.]. We can divide these operations in some categories:\n\n### Row operations\n\nThese are operations that only affect rows, leaving all columns untouched.\n\n- *Filtering* or *subsetting* is when we select a subset of rows based on some criteria. Example: all male penguins of species Adelie. The output is a dataframe with the exact same columns, but possibly fewer rows.\n\n- *Arranging* or *ordering* is when we reorder the rows of a dataframe using some criteria.\n\n### Column operations\n\nThese are operations that only affect columns, leaving all rows untouched.\n\n- *Selecting* is when we select some columns of a dataframe, while keeping all the rows. Example: select the `species` and `sex` columns.\n\n- *Mutating* or *transforming* is when we create new columns. Example: a new column `body_mass_kg` can be obtained dividing the column `body_mass_g` by 1000 for each entry.\n\n### Reshaping operations\n\nThese operations change the shape of a dataframe, making it wider or longer.\n\n- `Widening`\n\n- `Longering`?\n\n### Grouping operations\n\n- *Grouping* is when we split the dataframe into a collection (array) of dataframes using some criteria. Example: grouping by `species` gives us 3 dataframes, each with only one species.\n\n### Summary operations\n\nThese operations can possibly change rows and columns at the same time.\n\n- Distinct;\n- Counting;\n- *Summarising* or *combining* is when we apply some function to some columns in order to reduce the amount of rows with some kind of summary (like a mean, median, max, and so on). Example: for each `species`, apply the `mean` function to the columns `body_mass_g`. This will yield a dataframe with 3 rows, one for each species. Summarising is usually done after a grouping, so the summary is calculated with relation to each of the groups.\n\n??? deixar grupo e sum√°rio juntos?\n\nSince all these functions return a dataframe (or an array of dataframes, in the case of grouping), we can chain these operations together, with the convention that on grouped dataframes we apply the function in each one of the groups.\n\nNow for binary operations (ie. operations that take two dataframes), we have all the joins:\n\n- Left join;\n- Right join;\n- Inner join;\n- Outer join;\n- Full join.\n\n## Comparing Tidier with DataFramesMeta\n\nThe following table list the operations on each package:\n\n| dplyr       | Tidier       | DataFramesMeta               | DataFrames   |\n|-------------|--------------|------------------------------|--------------|\n| `filter`    | `@filter`    | `@subset` / `@rsubset`       | `subset`     |\n| `arrange`   | `@arrange`   | `@orderby` / `@rorderby`     | `sort!`      |\n| `select`    | `@select`    | `@select`                    | array sintax |\n| `mutate`    | `@mutate`    | `@transform` / `@rtransform` | array sintax |\n| `group_by`  | `@group_by`  | `@groupby`                   | `groupby`    |\n| `summarise` | `@summarise` | `@combine`                   | `combine`    |\n\nIt is clear that for those coming from `R`, Tidier will look like the most natural approach.\n\nNotice that we have a name clash with `@select`: that is why we `import DataFramesMeta as DFM` at the beginning.\n\nWe will see each operation with more details in the following chapters.\n\n## Chaining operations\n\nWe can chain (or pipe) dataframe operations as follows with the `@chain` macro:\n\n::: {#b4330699 .cell execution_count=3}\n``` {.julia .cell-code}\n@chain penguins begin\n    @filter !ismissing(sex)\n    @group_by sex\n    @summarise mean = mean(bill_length_mm)\n    @arrange mean\nend\n```\n:::\n\n\n## Using variables as column names\n\nIn Tidier, using the column names as if they were variables in the environment leads to some complication when we want to use other variables that are not column names.\n\nFor example, suppose you want to arrange penguins by a column that is stored in a variable.\n\nWhen this happens, we add `@eval` before the Tidier code and add a `$` to force evaluation of the variable, as in the following example:\n\n::: {#02f559e9 .cell execution_count=4}\n``` {.julia .cell-code}\nmy_arrange_column = :body_mass_g;\n\n@eval @arrange penguins $my_arrange_column\n```\n:::\n\n\n## Documentation\n\nhttps://dataframes.juliadata.org/stable/man/working_with_dataframes/\n\nhttps://juliadata.org/DataFramesMeta.jl/stable\n\nhttps://tidierorg.github.io/TidierData.jl/latest/reference/\n\n",
    "supporting": [
      "dataframes_files"
    ],
    "filters": [],
    "includes": {}
  }
}