---
# jupyter: julia-1.10
engine: julia
---

# Part 2: Dataframes

Dataframes are one of the most important objects in data science. A dataframe is a table where each row is an observation and each column is a variable.

We will use the Palmer Penguin dataset as a toy example for the remaining of the chapter.

```{julia}
using DataFrames, PalmerPenguins
using Tidier, Chain
import DataFramesMeta as DFM

penguins = PalmerPenguins.load() |> DataFrame
```

::: {.callout-note}

`Dataframes.jl` is the main package for dealing with dataframes in Julia. You can use it directly to manipulate tables, but we also have 2 alternatives: DataFramesMeta and Tidier. 

DataFramesMeta is a collection of macros based on DataFrames.

Tidier is inspired by the `tidyverse` ecosystem in R. Tidier use macros to rewrite your code into DataFrames.jl code. Because of this "tidy" heritance, we will often talk about the R packages that inspired the Julia ones (like `dplyr`, `tidyr` and many others).

In this book, whenever possible, we will show the different approaches in a tabset so you can compare them.
:::

## Operations

Let's start with some operations that take only one dataframe as input.^[Join operations will be dealt later.]. Here is the basic terminology:

- *Selecting* is when we select some columns of a dataframe, while keeping all the rows. Example: select the `species` and `sex` columns.

- *Filtering* or *subsetting* is when we select a subset of rows based on some criteria. Example: all male penguins of species Adelie. The output is a dataframe with the exact same columns, but possibly fewer rows.

- *Mutating* or *transforming* is when we create new columns. Example: a new column `body_mass_kg` can be obtained dividing the column `body_mass_g` by 1000.

- *Grouping* is when we split the dataframe into a collection (array) of dataframes using some criteria. Example: grouping by `species` gives us 3 dataframes, each with only one species.

- *Summarising* or *combining* is when we apply some function to some columns in order to reduce the amount of rows with some kind of summary (like a mean, median, max, and so on). Example: for each `species`, apply the `mean` function to the columns `body_mass_g`. This will yield a dataframe with 3 rows, one for each species. Summarising is usually done after a grouping, so the summary is calculated with relation to each of the groups.

- *Arranging* or *ordering* is when we reorder the rows of a dataframe using some criteria.

Since all these functions return a dataframe (or an array of dataframes, in the case of grouping), we can chain these operations together, with the convention that on grouped dataframes we apply the function in each one of the groups.

## Comparing Tidier with DataFramesMeta

The following table list the operations on each package:

| dplyr       | Tidier       | DataFramesMeta               | DataFrames   |
|-------------|--------------|------------------------------|--------------|
| `select`    | `@select`    | `@select`                    | array sintax |
| `filter`    | `@filter`    | `@subset` / `@rsubset`       | `filter`     |
| `mutate`    | `@mutate`    | `@transform` / `@rtransform` | array sintax |
| `group_by`  | `@group_by`  | `@groupby`                   | `groupby`    |
| `summarise` | `@summarise` | `@combine`                   | `combine`    |
| `arrange`   | `@arrange`   | `@orderby` / `@rorderby`     | `sort!`      |

It is clear that for those coming from `R`, Tidier will look like the most natural approach.

Notice that we have a name clash with `@select`: that is why we `import DataFramesMeta as DFM` at the beginning.

We will see each operation with more details in the following chapters.

## Chaining operations

We can chain (or pipe) dataframe operations as follows with the `@chain` macro:

```{julia}
@chain penguins begin
    @filter !ismissing(sex)
    @group_by sex
    @summarise mean = mean(bill_length_mm)
    @arrange mean
end
```